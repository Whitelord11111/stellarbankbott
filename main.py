import logging
import uuid
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
import aiohttp
import aiocryptopay
from config import Config
from database import get_db, init_db

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
router = Router()
bot = Bot(token=Config.TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
crypto = aiocryptopay.CryptoPay(Config.CRYPTOBOT_TOKEN)
fragment_session = aiohttp.ClientSession(
    headers={"Authorization": Config.FRAGMENT_API_KEY}
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PurchaseStates(StatesGroup):
    select_quantity = State()
    select_currency = State()
    payment_waiting = State()
    enter_telegram_tag = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å")],
        ],
        resize_keyboard=True,
    )

def currency_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="TON"), KeyboardButton(text="USDT")],
            [KeyboardButton(text="BTC"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_crypto_rate(currency: str) -> float:
    rates = await crypto.get_exchange_rates()
    rate = next(
        (r.rate for r in rates if r.source == currency and r.target == "RUB"), None
    )
    if not rate:
        raise ValueError(f"–ö—É—Ä—Å –¥–ª—è {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return rate

async def verify_telegram_tag(tag: str) -> bool:
    try:
        async with fragment_session.get(
            f"https://fragment-api.com/verify?tag={tag}"
        ) as resp:
            data = await resp.json()
            return data.get("valid", False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–≥–∞: {e}")
        return False

async def purchase_stars(quantity: int, tag: str) -> Dict:
    try:
        async with fragment_session.post(
            "https://fragment-api.com/purchase",
            json={"quantity": quantity, "recipient_tag": tag},
        ) as resp:
            return await resp.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥: {e}")
        return {"success": False}

async def update_user_data(user_id: int, stars: int, amount: float):
    with get_db() as conn:
        cursor = conn.cursor()
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            """INSERT OR IGNORE INTO users (user_id) VALUES (?)""", (user_id,)
        )
        cursor.execute(
            """UPDATE users 
            SET total_stars = total_stars + ?, 
                total_spent = total_spent + ? 
            WHERE user_id = ?""",
            (stars, amount, user_id),
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        cursor.execute(
            """INSERT INTO transactions 
            (tx_id, user_id, stars, amount_rub, recipient_tag)
            VALUES (?, ?, ?, ?, ?)""",
            (str(uuid.uuid4()), user_id, stars, amount, tag),
        )
        conn.commit()

# –•–µ–Ω–¥–ª–µ—Ä—ã
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StellarBankBot!", reply_markup=main_menu())

@router.message(F.text == "üåü –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã")
async def start_purchase(message: types.Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (1-1000):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PurchaseStates.select_quantity)

@router.message(PurchaseStates.select_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if 1 <= quantity <= 1000:
            await state.update_data(quantity=quantity)
            await message.answer("üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=currency_menu())
            await state.set_state(PurchaseStates.select_currency)
        else:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")

@router.message(PurchaseStates.select_currency, F.text.in_(["TON", "USDT", "BTC"]))
async def process_currency(message: types.Message, state: FSMContext):
    currency = message.text
    data = await state.get_data()
    
    try:
        rate = await get_crypto_rate(currency)
        total_rub = data["quantity"] * Config.STAR_PRICE_RUB
        total_crypto = total_rub / rate
        
        invoice = await crypto.create_invoice(
            asset=currency,
            amount=total_crypto,
            description=f"–ü–æ–∫—É–ø–∫–∞ {data['quantity']} –∑–≤–µ–∑–¥",
            paid_btn_name="openBot",
            payload=f"{message.from_user.id}",
        )
        
        pay_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.pay_url)],
                [InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_{invoice.invoice_id}"
                )],
            ]
        )
        
        await message.answer(
            f"üìÑ *–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É*\n\n"
            f"‚Ä¢ –°—É–º–º–∞: `{total_crypto:.8f} {currency}`\n"
            f"‚Ä¢ RUB: {total_rub}‚ÇΩ\n"
            f"‚Ä¢ –ó–≤–µ–∑–¥: {data['quantity']}",
            reply_markup=pay_button,
            parse_mode=ParseMode.MARKDOWN,
        )
        await state.update_data(
            invoice_id=invoice.invoice_id,
            currency=currency,
            total_rub=total_rub,
        )
        await state.set_state(PurchaseStates.payment_waiting)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("check_"))
async def check_payment(callback: types.CallbackQuery, state: FSMContext):
    invoice_id = callback.data.split("_")[1]
    
    try:
        invoice = await crypto.get_invoices(invoice_ids=invoice_id)
        if invoice.status != "paid":
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞", show_alert=True)
            return
        
        await callback.message.edit_reply_markup()
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ Telegram —Ç–µ–≥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
        await state.set_state(PurchaseStates.enter_telegram_tag)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

@router.message(PurchaseStates.enter_telegram_tag)
async def process_tag(message: types.Message, state: FSMContext):
    tag = message.text.lstrip("@")
    data = await state.get_data()
    
    if not await verify_telegram_tag(tag):
        await message.answer("‚ùå –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram —Ç–µ–≥:")
        return
    
    try:
        purchase_result = await purchase_stars(data["quantity"], tag)
        if not purchase_result.get("success"):
            raise ValueError(purchase_result.get("error", "Unknown error"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await update_user_data(
            user_id=message.from_user.id,
            stars=data["quantity"],
            amount=data["total_rub"],
        )
        
        await message.answer(
            f"üéâ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥: {data['quantity']}\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{tag}\n"
            f"‚Ä¢ –°—É–º–º–∞: {data['total_rub']}‚ÇΩ"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ CryptoBot API
    finally:
        await state.clear()

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT total_stars, total_spent FROM users WHERE user_id = ?",
            (message.from_user.id,),
        )
        result = cursor.fetchone()
        
    if result:
        stars, spent = result
        await message.answer(
            f"üìä –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
            f"‚Ä¢ –ó–≤–µ–∑–¥: {stars} üåü\n"
            f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f}‚ÇΩ"
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫")

@router.message(F.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT username, total_stars, total_spent FROM users WHERE user_id = ?",
            (message.from_user.id,),
        )
        result = cursor.fetchone()
        
    if result:
        username, stars, spent = result
        response = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"‚Ä¢ –¢–µ–≥: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚Ä¢ ID: {message.from_user.id}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {stars} üåü\n"
            f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f}‚ÇΩ"
        )
    else:
        response = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    await message.answer(response)

async def main():
    dp = Dispatcher()
    dp.include_router(router)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await bot.set_webhook(
        url=Config.WEBHOOK_URL,
        secret_token=Config.WEBHOOK_SECRET,
    )
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
