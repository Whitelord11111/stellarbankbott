# main.py
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiosend import CryptoPay
from aiosend.types import Invoice
from config import Config
from database import Database
from aiohttp import web
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=Config.TELEGRAM_TOKEN)
dp = Dispatcher()
db = Database()
cp = CryptoPay(token=Config.CRYPTOBOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PurchaseStates(StatesGroup):
    SELECT_AMOUNT = State()
    CONFIRM_PAYMENT = State()
    ENTER_RECIPIENT = State()

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö—É–ø–∏—Ç–µ –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ CryptoBot:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚≠êÔ∏è –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã")]],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "‚≠êÔ∏è –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã")
async def buy_stars(message: types.Message, state: FSMContext):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ ({Config.MIN_STARS}-{Config.MAX_STARS}):")
    await state.set_state(PurchaseStates.SELECT_AMOUNT)

@dp.message(PurchaseStates.SELECT_AMOUNT)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        stars = int(message.text)
        if not (Config.MIN_STARS <= stars <= Config.MAX_STARS):
            raise ValueError
            
        amount_usd = stars * Config.STAR_PRICE_USD
        invoice = await cp.create_invoice(
            amount=amount_usd,
            asset="USDT",
            description=f"–ü–æ–∫—É–ø–∫–∞ {stars} –∑–≤—ë–∑–¥",
            allow_anonymous=False
        )

        await message.answer(
            f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {amount_usd:.2f} USDT:\n{invoice.bot_invoice_url}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_{invoice.invoice_id}"
                )
            ]])
        )
        await state.update_data(invoice_id=invoice.invoice_id, stars=stars)
        await state.set_state(PurchaseStates.CONFIRM_PAYMENT)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        await state.clear()

@cp.invoice_polling()
async def handle_paid_invoice(invoice: Invoice):
    if invoice.status == "paid":
        logger.info(f"–û–ø–ª–∞—á–µ–Ω –∏–Ω–≤–æ–π—Å: {invoice.invoice_id}")

@dp.callback_query(F.data.startswith("check_"))
async def check_payment(call: types.CallbackQuery, state: FSMContext):
    invoice_id = int(call.data.split("_")[1])
    invoice = await cp.get_invoice(invoice_id)
    
    if invoice.status == "paid":
        await call.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        await state.set_state(PurchaseStates.ENTER_RECIPIENT)
    else:
        await call.answer("‚åõ –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(PurchaseStates.ENTER_RECIPIENT)
async def send_stars(message: types.Message, state: FSMContext):
    data = await state.get_data()
    recipient = message.text.strip("@")
    
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://api.fragment-api.com/v1/order/stars/",
            json={"username": recipient, "quantity": data['stars']},
            headers={"Authorization": Config.FRAGMENT_KEY}
        ) as resp:
            if resp.status == 200:
                await message.answer(f"üåü {data['stars']} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã @{recipient}!")
            else:
                error = await resp.text()
                logger.error(f"Fragment API Error: {error}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    await state.clear()

async def web_app():
    app = web.Application()
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    return app

async def main():
    await db.connect()
    app = await web_app()
    await dp.start_polling(bot)
    await cp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
