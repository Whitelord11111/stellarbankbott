import os
import json
import logging
import asyncio

from aiohttp import web
import aiohttp

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Text
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from aiocryptopay import AioCryptoPay, Networks

# --- –ö–û–ù–§–ò–ì ---
BOT_TOKEN         = '7391952562:AAHEVkEAqvyEc5YYwQZowaQVOoXYqDCKcC4'
CRYPTO_TOKEN      = '378343:AA836haaZrzZYInSBc1fXlm9HcgQsz4ChrS'
FRAGMENT_API_KEY  = 'c32ec465-5d81-4ca0-84d9-df6840773859'
FRAGMENT_BASE     = "https://fragmentapi.com/api"

# URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞ Render.com), –Ω–∞–ø—Ä–∏–º–µ—Ä:
APP_URL           = os.getenv("APP_URL", "https://stellarbankbot.onrender.com")

# –¥–ª—è Telegram‚Äëwebhook
WEBHOOK_SECRET    = BOT_TOKEN
WEBHOOK_PATH      = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL       = APP_URL + WEBHOOK_PATH
PORT              = int(os.getenv("PORT", "8080"))

# –¥–ª—è CryptoBot‚Äëwebhook
CRYPTO_PATH       = "/crypto-pay"

# —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
DATA_FILE         = "data.json"


# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot    = Bot(token=BOT_TOKEN)
dp     = Dispatcher(storage=MemoryStorage())
crypto = AioCryptoPay(token=CRYPTO_TOKEN, network=Networks.MAIN_NET)


# --- –ü–ï–†–°–ò–°–¢–ï–ù–° ---
user_balances = {}
user_stats    = {}

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            d = json.load(f)
            return d.get("balances", {}), d.get("stats", {})
    return {}, {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"balances": user_balances, "stats": user_stats}, f,
                  ensure_ascii=False, indent=2)

user_balances, user_stats = load_data()

async def auto_save():
    while True:
        try:
            save_data()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–µ–π–≤–∞")
        await asyncio.sleep(10)


# --- FSM: —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥ ---
class BuyStars(StatesGroup):
    waiting_amount    = State()
    confirm_purchase  = State()
    choose_crypto     = State()
    waiting_for_tag   = State()


# --- –•–ï–ù–î–õ–ï–†–´ ---

@dp.message.register(CommandStart())
async def cmd_start(message: types.Message):
    uid = str(message.from_user.id)
    user_balances.setdefault(uid, 0)
    user_stats  .setdefault(uid, {"total_stars": 0, "total_spent": 0.0})

    kb = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="üëõ –ë–∞–ª–∞–Ω—Å")],
        [types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥")],
    ], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥ ‚≠êÔ∏è", reply_markup=kb)


@dp.message.register(Text(text="üëõ –ë–∞–ª–∞–Ω—Å"))
async def show_balance(message: types.Message):
    uid = str(message.from_user.id)
    await message.answer(f"–£ —Ç–µ–±—è {user_balances.get(uid,0)} ‚≠êÔ∏è")


@dp.message.register(Text(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
async def show_profile(message: types.Message):
    uid   = str(message.from_user.id)
    stats = user_stats.get(uid, {"total_stars":0,"total_spent":0.0})
    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"üÜî {uid}\n"
        f"‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: {stats['total_stars']}\n"
        f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']:.2f}‚ÇΩ"
    )


@dp.message.register(Text(text="‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥"))
async def buy_stars(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="50 ‚≠êÔ∏è –∑–∞ 80‚ÇΩ",  callback_data="buy_50"),
            types.InlineKeyboardButton(text="100 ‚≠êÔ∏è –∑–∞ 160‚ÇΩ", callback_data="buy_100")
        ],
        [
            types.InlineKeyboardButton(text="150 ‚≠êÔ∏è –∑–∞ 240‚ÇΩ", callback_data="buy_150"),
            types.InlineKeyboardButton(text="200 ‚≠êÔ∏è –∑–∞ 320‚ÇΩ", callback_data="buy_200")
        ],
        [
            types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="buy_custom")
        ],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥:", reply_markup=kb)


@dp.callback_query.register(lambda c: c.data.startswith("buy_"))
async def handle_buy_package(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    pkg = call.data.split("_",1)[1]
    if pkg == "custom":
        await call.message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (50‚Äì1‚ÄØ000‚ÄØ000):")
        await state.set_state(BuyStars.waiting_amount)
    else:
        amount = int(pkg)
        cost   = amount * 1.6
        await state.update_data(amount=amount, cost=cost)
        kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_no"),
        ]])
        await call.message.answer(f"–ö—É–ø–∏—Ç—å {amount} ‚≠êÔ∏è –∑–∞ {cost:.2f}‚ÇΩ?", reply_markup=kb)
        await state.set_state(BuyStars.confirm_purchase)


@dp.message.register(BuyStars.waiting_amount)
async def input_custom_amount(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        return await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    amt = int(text)
    if not (50 <= amt <= 1_000_000):
        return await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 50 –¥–æ 1‚ÄØ000‚ÄØ000.")
    cost = amt * 1.6
    await state.update_data(amount=amt, cost=cost)
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_no"),
    ]])
    await message.answer(f"–ö—É–ø–∏—Ç—å {amt} ‚≠êÔ∏è –∑–∞ {cost:.2f}‚ÇΩ?", reply_markup=kb)
    await state.set_state(BuyStars.confirm_purchase)


@dp.callback_query.register(BuyStars.confirm_purchase, lambda c: c.data=="confirm_yes")
async def payment_method(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç—ã
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="TON",  callback_data="crypto_TON"),
        types.InlineKeyboardButton(text="USDT", callback_data="crypto_USDT"),
        types.InlineKeyboardButton(text="BTC",  callback_data="crypto_BTC"),
    ]])
    await call.message.answer("–í—ã–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
    await state.set_state(BuyStars.choose_crypto)


@dp.callback_query.register(BuyStars.confirm_purchase, lambda c: c.data=="confirm_no")
async def cancel_purchase(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@dp.callback_query.register(BuyStars.choose_crypto)
async def create_invoice(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    sym   = call.data.split("_",1)[1]
    data  = await state.get_data()
    amount = data["amount"]
    cost   = data["cost"]

    # 1) –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ CoinGecko
    async with aiohttp.ClientSession() as sess:
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={sym.lower()}&vs_currencies=rub"
        async with sess.get(url) as r:
            j = await r.json()
    rate = j.get(sym.lower(),{}).get("rub")
    if not rate:
        return await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.")
    crypto_amt = round(cost / rate, 6)

    # 2) —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ aiocryptopay
    #    –≤ payload –∑–∞—à–∏–≤–∞–µ–º chat_id, amount, cost
    payload_str = f"{call.from_user.id}:{amount}:{cost}"
    invoice = await crypto.create_invoice(
        asset=sym,
        amount=crypto_amt,
        payload=payload_str,
        description="–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥"
    )
    pay_url = invoice.bot_invoice_url or invoice.url
    await call.message.answer(f"üîó –û–ø–ª–∞—Ç–∏ –∑–¥–µ—Å—å: {pay_url}")
    # –¥–∞–ª–µ–µ –æ–∂–∏–¥–∞–µ–º webhook –æ—Ç CryptoBot


@crypto.pay_handler()
async def invoice_paid(update, app):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç CryptoBot –æ –ø–ª–∞—Ç–µ–∂–µ."""
    if update.payload.status != "paid":
        return
    pl = update.payload.payload or ""
    try:
        chat_str, amt_str, cost_str = pl.split(":")
        chat_id = int(chat_str)
    except Exception:
        logger.error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π payload –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: %s", pl)
        return

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
    await bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ Telegram‚Äë—Ç–µ–≥ (–±–µ–∑ @):")
    state = dp.current_state(chat=chat_id, user=chat_id)
    await state.set_state(BuyStars.waiting_for_tag)
    await state.update_data(amount=int(amt_str), cost=float(cost_str))


@dp.message.register(BuyStars.waiting_for_tag)
async def receive_tag(message: types.Message, state: FSMContext):
    tag = message.text.strip().lstrip("@")
    if not tag.isalnum():
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞.")
    data = await state.get_data()
    amt  = data["amount"]
    cost = data["cost"]

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Fragment
    headers = {"Authorization": f"Bearer {FRAGMENT_API_KEY}"}
    async with aiohttp.ClientSession() as sess:
        async with sess.get(f"{FRAGMENT_BASE}/users/{tag}", headers=headers) as resp:
            if resp.status != 200:
                return await message.answer("‚ö†Ô∏è –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Fragment.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Fragment API
    async with aiohttp.ClientSession() as sess:
        async with sess.post(
            f"{FRAGMENT_BASE}/stars/send",
            json={"receiver": f"@{tag}", "amount": amt},
            headers=headers
        ) as resp:
            if resp.status != 200:
                return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤—ë–∑–¥.")

    # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    uid = str(message.from_user.id)
    user_balances[uid] = user_balances.get(uid, 0) + amt
    stats = user_stats.setdefault(uid, {"total_stars":0,"total_spent":0.0})
    stats["total_stars"]  += amt
    stats["total_spent"]  += cost
    save_data()

    await message.answer(f"‚≠êÔ∏è @{tag} –ø–æ–ª—É—á–∏–ª {amt} –∑–≤—ë–∑–¥!")
    await state.clear()


# --- WEBHOOK –ò –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---

async def on_startup(app: web.Application):
    # Telegram webhook
    await bot.set_webhook(WEBHOOK_URL, allowed_updates=["message","callback_query"])
    # –∞–≤—Ç–æ—Å–µ–π–≤ –¥–∞–Ω–Ω—ã—Ö
    asyncio.create_task(auto_save())
    logger.info(f"Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    # —É–¥–∞–ª—è–µ–º Telegram webhook
    await bot.delete_webhook()
    # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é aiocryptopay
    await crypto.close()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω, —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")


def main():
    app = web.Application()

    # 1) Telegram‚Äëwebhook
    handler = SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET)
    handler.register(app, path=WEBHOOK_PATH)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # 2) CryptoBot‚Äëwebhook
    app.router.add_post(CRYPTO_PATH, crypto.get_updates)

    # –ó–∞–ø—É—Å–∫ aiohttp‚Äë—Å–µ—Ä–≤–µ—Ä–∞ (Render.com —Å–ª—É—à–∞–µ—Ç 0.0.0.0:PORT)
    logger.info(f"–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{PORT}")
    web.run_app(app, host="0.0.0.0", port=PORT)


if __name__ == "__main__":
    main()
