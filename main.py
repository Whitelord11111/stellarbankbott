import logging
import uuid
import hmac
import hashlib
import json
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
import aiohttp
from config import Config
from database import db_connection, init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

router = Router()
bot = Bot(token=Config.TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PurchaseStates(StatesGroup):
    select_package = State()
    confirm_purchase = State()
    input_custom = State()
    select_currency = State()
    payment_waiting = State()
    enter_telegram_tag = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

# –ü–∞–∫–µ—Ç—ã –∑–≤–µ–∑–¥
STAR_PACKAGES = {
    "50 ‚≠êÔ∏è –∑–∞ 80‚ÇΩ": 50,
    "100 ‚≠êÔ∏è –∑–∞ 160‚ÇΩ": 100,
    "150 ‚≠êÔ∏è –∑–∞ 240‚ÇΩ": 150,
    "200 ‚≠êÔ∏è –∑–∞ 320‚ÇΩ": 200,
    "250 ‚≠êÔ∏è –∑–∞ 400‚ÇΩ": 250
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëõ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥")]
        ],
        resize_keyboard=True
    )

def currency_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="TON"), KeyboardButton(text="USDT")],
            [KeyboardButton(text="BTC"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

# –†–∞–±–æ—Ç–∞ —Å Crypto Pay API
async def crypto_api_request(method: str, endpoint: str, data: dict = None) -> dict:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.request(
                method, 
                f"{Config.CRYPTO_API_URL}/{endpoint}",
                json=data,
                headers={"Crypto-Pay-API-Token": Config.CRYPTOBOT_TOKEN}
            ) as resp:
                return await resp.json()
    except aiohttp.ClientError as e:
        logger.error(f"API Connection Error: {str(e)}")
        return {"ok": False, "error": str(e)}

# –•–µ–Ω–¥–ª–µ—Ä—ã
@router.message(Command("start"))
async def start(message: types.Message):
    try:
        with db_connection() as conn:
            conn.execute(
                "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
                (message.from_user.id, message.from_user.username)
            )
            conn.commit()
        await message.answer("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StellarBankBot!", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"Database Error: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥")
async def buy_stars(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"buy_{value}") for name, value in STAR_PACKAGES.items()],
        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="buy_custom")]
    ])
    await message.answer("üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥:", reply_markup=kb)

@router.callback_query(F.data.startswith("buy_"))
async def handle_package(call: types.CallbackQuery, state: FSMContext):
    try:
        action = call.data.split("_")[1]
        
        if action == "custom":
            await call.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (50-1000):")
            await state.set_state(PurchaseStates.input_custom)
        else:
            amount = int(action)
            cost = amount * Config.STAR_PRICE_RUB
            await state.update_data(amount=amount, cost=cost)
            
            confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
                 InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
            ])
            await call.message.answer(
                f"üõí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:\n"
                f"‚Ä¢ –ó–≤—ë–∑–¥—ã: {amount} ‚≠êÔ∏è\n"
                f"‚Ä¢ –°—É–º–º–∞: {cost:.2f}‚ÇΩ",
                reply_markup=confirm_kb
            )
            await state.set_state(PurchaseStates.confirm_purchase)
    except Exception as e:
        logger.error(f"Package Handling Error: {str(e)}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(PurchaseStates.input_custom)
async def process_custom_input(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if 50 <= amount <= 1000000:
            cost = amount * Config.STAR_PRICE_RUB
            await state.update_data(amount=amount, cost=cost)
            
            confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
                 InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
            ])
            await message.answer(
                f"üõí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:\n"
                f"‚Ä¢ –ó–≤—ë–∑–¥—ã: {amount} ‚≠êÔ∏è\n"
                f"‚Ä¢ –°—É–º–º–∞: {cost:.2f}‚ÇΩ",
                reply_markup=confirm_kb
            )
            await state.set_state(PurchaseStates.confirm_purchase)
        else:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 50 –¥–æ 1‚ÄØ000‚ÄØ000!")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!")
    except Exception as e:
        logger.error(f"Custom Input Error: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(PurchaseStates.confirm_purchase, F.data == "confirm_yes")
async def confirm_purchase(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.answer("üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=currency_menu())
        await state.set_state(PurchaseStates.select_currency)
    except Exception as e:
        logger.error(f"Confirmation Error: {str(e)}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(PurchaseStates.select_currency, F.text.in_(["TON", "BTC", "USDT"]))
async def process_currency(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        asset = message.text
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        rates = await crypto_api_request("GET", "getExchangeRates")
        if not rates.get("ok"):
            raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
        
        rate = next(
            (float(r["rate"]) for r in rates["result"] 
             if r["source"] == asset and r["target"] == "RUB"),
            None
        )
        if not rate:
            raise ValueError(f"–ö—É—Ä—Å –¥–ª—è {asset}/RUB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        total_rub = data["cost"]
        total_crypto = total_rub / rate
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
        invoice = await crypto_api_request(
            "POST", "createInvoice",
            {
                "asset": asset,
                "amount": f"{total_crypto:.8f}",
                "description": f"–ü–æ–∫—É–ø–∫–∞ {data['amount']} –∑–≤–µ–∑–¥"
            }
        )
        
        if not invoice.get("ok"):
            raise ValueError(f"–û—à–∏–±–∫–∞ API: {invoice.get('description')}")
        
        invoice_data = invoice["result"]
        pay_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_data["pay_url"])],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_data['invoice_id']}")]
        ])
        
        await message.answer(
            f"üìÑ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É:\n"
            f"‚Ä¢ –°—É–º–º–∞: {total_crypto:.8f} {asset}\n"
            f"‚Ä¢ RUB: {total_rub:.2f}‚ÇΩ\n"
            f"‚Ä¢ –ó–≤–µ–∑–¥: {data['amount']}",
            reply_markup=pay_kb
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with db_connection() as conn:
            conn.execute(
                """INSERT INTO transactions 
                (tx_id, user_id, stars, amount_rub, invoice_id, status)
                VALUES (?, ?, ?, ?, ?, ?)""",
                (str(uuid.uuid4()), message.from_user.id, data["amount"], 
                 total_rub, invoice_data["invoice_id"], "created")
            )
            conn.commit()
        
        await state.update_data(invoice_id=invoice_data["invoice_id"])
        await state.set_state(PurchaseStates.payment_waiting)
        
    except Exception as e:
        logger.error(f"Currency Processing Error: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("check_"))
async def check_payment(call: types.CallbackQuery, state: FSMContext):
    try:
        invoice_id = call.data.split("_")[1]
        
        response = await crypto_api_request("GET", f"getInvoices?invoice_ids={invoice_id}")
        if not response.get("ok"):
            raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
        
        invoice = response["result"]["items"][0]
        
        if invoice["status"] == "paid":
            await call.message.edit_reply_markup()
            await call.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ Telegram —Ç–µ–≥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
            await state.set_state(PurchaseStates.enter_telegram_tag)
        else:
            await call.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞!", show_alert=True)
            
    except Exception as e:
        logger.error(f"Payment Check Error: {str(e)}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

@router.message(PurchaseStates.enter_telegram_tag)
async def process_tag(message: types.Message, state: FSMContext):
    try:
        tag = message.text.lstrip("@")
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–∞ —á–µ—Ä–µ–∑ Fragment API
        async with aiohttp.ClientSession() as session:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–∞
            async with session.get(
                "https://api.fragment.com/username/check",
                params={"username": tag},
                headers={"Authorization": f"Bearer {Config.FRAGMENT_API_KEY}"}
            ) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    raise ValueError(f"Fragment API error: {error_text}")
                
                result = await resp.json()
                if not result.get("ok") or not result["result"].get("valid"):
                    raise ValueError("–¢–µ–≥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")

            # 2. –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥
            async with session.post(
                "https://api.fragment.com/purchase",
                headers={
                    "Authorization": f"Bearer {Config.FRAGMENT_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "username": tag,
                    "amount": data["amount"],
                    "currency": "STARS"
                }
            ) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    raise ValueError(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {error_text}")
                
                purchase_result = await resp.json()
                if not purchase_result.get("ok"):
                    raise ValueError(purchase_result.get("error", "–û—à–∏–±–∫–∞"))

        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with db_connection() as conn:
            conn.execute(
                """UPDATE transactions 
                SET status = ?, recipient_tag = ? 
                WHERE invoice_id = ?""",
                ("completed", tag, data["invoice_id"])
            )
            conn.commit()

        await message.answer(f"üéâ –£—Å–ø–µ—à–Ω–æ! {data['amount']} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã @{tag}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
        if 'invoice_id' in data:
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ {data['invoice_id']}")
            await crypto_api_request("POST", f"refund/{data['invoice_id']}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    finally:
        await state.clear()

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def crypto_webhook(request: web.Request):
    logger.info("–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Crypto Pay!")
    body = await request.text()
    logger.debug(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {body}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        body = await request.text()
        signature = request.headers.get("Crypto-Pay-API-Signature")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        secret = Config.WEBHOOK_SECRET.encode()
        expected_signature = hmac.new(secret, body.encode(), hashlib.sha256).hexdigest()
        
        if signature != expected_signature:
            return web.Response(status=403)
        
        data = json.loads(body)
        invoice = data.get("invoice")
        
        if invoice["status"] == "paid":
            with db_connection() as conn:
                conn.execute(
                    "UPDATE transactions SET status = ? WHERE invoice_id = ?",
                    ("paid", invoice["invoice_id"])
                )
                conn.commit()
        
        return web.Response(text="OK")
    
    except Exception as e:
        logger.error(f"Webhook Error: {str(e)}")
        return web.Response(status=500)

async def on_startup():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(
        url=Config.WEBHOOK_URL,
        secret_token=Config.WEBHOOK_SECRET
    )
    logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

async def main():
    dp = Dispatcher()
    dp.include_router(router)
    dp.startup.register(on_startup)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_post("/webhook", crypto_webhook)
    SimpleRequestHandler(dp, bot).register(app, path="/")
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=int(Config.PORT))  # 0.0.0.0 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {Config.PORT}")
        # –£–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å start_polling!
        while True:
    await asyncio.sleep(3600)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    finally:
        await runner.cleanup()


if __name__ == "__main__":
    import asyncio
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    Config.validate()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
