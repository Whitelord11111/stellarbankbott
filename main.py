import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiosend import CryptoPay
from aiosend.types import Invoice
from aiosend.webhook import AiohttpManager
from config import Config
from database import Database
from aiohttp import web
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=Config.TELEGRAM_TOKEN)
dp = Dispatcher()
db = Database()

class PurchaseStates(StatesGroup):
    SELECT_AMOUNT = State()
    CONFIRM_PAYMENT = State()
    ENTER_RECIPIENT = State()

async def init_webhooks(app: web.Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL
    if not Config.WEBHOOK_URL.startswith("https://"):
        raise ValueError("WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoPay
    cp = CryptoPay(
        token=Config.CRYPTOBOT_TOKEN,
        webhook_manager=AiohttpManager(app, "/crypto_webhook")
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è CryptoBot
    @cp.webhook()
    async def crypto_webhook_handler(invoice: Invoice):
        if invoice.status == "paid":
            logger.info(f"–û–ø–ª–∞—á–µ–Ω –∏–Ω–≤–æ–π—Å: {invoice.invoice_id}")
        return web.Response(text="OK")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram
    await bot.delete_webhook(drop_pending_updates=True)
    webhook_url = f"{Config.WEBHOOK_URL}/telegram_webhook"
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    
    await bot.set_webhook(
        url=webhook_url,
        secret_token=os.getenv("WEBHOOK_SECRET")
    )
    
    return cp

@dp.message(Command("start"))
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö—É–ø–∏—Ç–µ –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ CryptoBot:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚≠êÔ∏è –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã")]],
            resize_keyboard=True
        )
    )


@dp.message(F.text == "‚≠êÔ∏è –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã")
async def buy_stars(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ ({Config.MIN_STARS}-{Config.MAX_STARS}):")
    await state.set_state(PurchaseStates.SELECT_AMOUNT)

@dp.message(PurchaseStates.SELECT_AMOUNT)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥"""
    try:
        stars = int(message.text)
        if not (Config.MIN_STARS <= stars <= Config.MAX_STARS):
            raise ValueError

        amount_usd = stars * Config.STAR_PRICE_USD
        invoice = await cp.create_invoice(
            amount=amount_usd,
            asset="USDT",
            description=f"–ü–æ–∫—É–ø–∫–∞ {stars} –∑–≤—ë–∑–¥",
            allow_anonymous=False
        )

        await message.answer(
            f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {amount_usd:.2f} USDT:\n{invoice.bot_invoice_url}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_{invoice.invoice_id}"
                )
            ]])
        )
        await state.update_data(invoice_id=invoice.invoice_id, stars=stars)
        await state.set_state(PurchaseStates.CONFIRM_PAYMENT)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        await state.clear()

@dp.callback_query(F.data.startswith("check_"))
async def check_payment(call: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    invoice_id = int(call.data.split("_")[1])
    invoice = await cp.get_invoice(invoice_id)
    
    if invoice.status == "paid":
        await call.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        await state.set_state(PurchaseStates.ENTER_RECIPIENT)
    else:
        await call.answer("‚åõ –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(PurchaseStates.ENTER_RECIPIENT)
async def send_stars(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ Fragment API"""
    data = await state.get_data()
    recipient = message.text.strip("@")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.fragment-api.com/v1/order/stars/",
                json={"username": recipient, "quantity": data['stars']},
                headers={"Authorization": Config.FRAGMENT_KEY}
            ) as resp:
                if resp.status == 200:
                    await message.answer(f"üåü {data['stars']} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã @{recipient}!")
                else:
                    error = await resp.text()
                    logger.error(f"Fragment API Error: {error}")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

async def telegram_webhook(request):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram"""
    try:
        request_data = await request.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {request_data}")
        return await dp._check_webhook(bot)(request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return web.Response(status=500)

async def main():
    await db.connect()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–æ–≤
    cp = await init_webhooks(app)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    app.router.add_post("/telegram_webhook", telegram_webhook)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()
    
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {os.getenv('PORT', 10000)}")
    logger.info(f"Telegram –≤–µ–±—Ö—É–∫: {Config.WEBHOOK_URL}/telegram_webhook")
    logger.info(f"CryptoBot –≤–µ–±—Ö—É–∫: {Config.WEBHOOK_URL}/crypto_webhook")
    
    await asyncio.Future()

if __name__ == "__main__":
    asyncio.run(main())
